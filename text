// todo هنا نقوم بكتابة العناصر الثابته في الموقع لاستخدمها في اكثر من مكان 
// ? $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
export const NameWebsite = "SolDelNilo"
// ? $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
const img1 = "/assets/pexels-axp-photography-500641970-18991590.jpg";
const img2 = "/assets/pexels-ahmed-aziz-126288236-12607742.jpg"
const img3 = "/assets/pexels-mert-celik-1876960105-33634565.jpg"
// ? $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
export const getHeroText = (t) => [
  {titel:t("title1")},
  {titel:t("title2")},
]
// ? $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
export const getSliderToursDiv = (t) => [
  {img:img1,title:t("TitleDivPic"),p:t("PDivPic"),btn:t("BtnDivPic")},
  {img:img2,title:t("TitleDivPic"),p:t("PDivPic"),btn:t("BtnDivPic")},
  {img:img3,title:t("TitleDivPic"),p:t("PDivPic"),btn:t("BtnDivPic")},
]
// ? $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
export const getCityName = (t) => [
  {city:t("Aswan"),value:"10"},
  {city:t("Cairo"),value:"20"},
  {city:t("Hurghada"),value:"30"},
  {city:t("Luxor"),value:"40"},
  {city:t("Mersa"),value:"50"},
  {city:t("Marsa"),value:"60"},
  {city:t("Sharm"),value:"70"},
]

 "Destinations":"Destinations",
    "About":"About Us",
    "Aswan":"Aswan",
    "Cairo":"Cairo",
    "Hurghada":"Hurghada",
    "Luxor":"Luxor",
    "Mersa":"Mersa Matruh",
    "Marsa":"Marsa Alam",
    "Sharm":"Sharm El Sheikh"


     w-full flex flex-row items-center justify-around capitalize



     // import { Swiper, SwiperSlide } from "swiper/react";
// import { Autoplay } from "swiper/modules";
// import Button from "@mui/material/Button";
// import { useTranslations } from "next-intl";
// import { getSliderToursDiv } from "@/lib/constants/FixedTexts";
// import Image from "next/image";
// // ? $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// const SliderDiv = () => {
//   // ? $$$$$$$$$$$$$$$$$$$$$$
//   const t = useTranslations("ToursHeroPage");
//   const ToursHeroSlider = getSliderToursDiv(t);
//   // ? $$$$$$$$$$$$$$$$$$$$$$
//   return (
//     <Swiper
//       modules={[Autoplay]}
//       spaceBetween={10}
//       slidesPerView={1}
//       loop={true}
//       autoplay={{ delay: 5000, disableOnInteraction: false }}
//     >
//       {ToursHeroSlider.map((i, index) => {
//         return (
//           <SwiperSlide key={index}>
//             <div
//               // style={{ backgroundImage: `url(${i.img})` }}
//               className="PhotoContainer relative"
//             >
//               <Image
//                 src={i.img}
//                 alt="SwiperSlide"
//                 style={{ borderRadius: "28px" }}
//                 fill
//                 className="object-cover"
//                 loading="eager"
//               />
//               <div
//                 style={{ color: "#fff" }}
//                 className="w-2/3 flex items-center justify-center flex-col gap-2.5 absolute"
//               >
//                 <h1
//                   style={{
//                     textTransform: "capitalize",
//                     fontWeight: "700",
//                   }}
//                   className="titleDiv"
//                 >
//                   {i.title}
//                 </h1>
//                 <p className="pDiv">{i.p}</p>
//                 <Button className="btnTours">{i.btn}</Button>
//               </div>
//               <div className="w-1/3"></div>
//             </div>
//           </SwiperSlide>
//         );
//       })}
//     </Swiper>
//   );
// };

// export default SliderDiv;

// {
//   "Header": {
//    "Home":"Hogar",
//     "Tours":"Excursiones",
//     "About":"Sobre nosotros",
//     "Admin":"Administrador"
//   },
//   "HomeHeroPage": {
//     "title1": "Tu viaje comienza aquí",
//     "title2": "Descubra Egipto a través de ojos eternos",
//     "p": "Embárcate en un viaje cautivador a lo largo del Nilo, descubre historias excepcionales y una belleza eterna a través de una experiencia especialmente diseñada.",
//     "btn1": "Explorar Tours",
//     "btn2": "Reservar ahora"
//   },
//   "ToursHeroPage": {
//     "titlePage": "Excursiones",
//     "TitleDivPic": "Descubre Egipto con NiloSol",
//     "PDivPic": "Viajes que despiertan los sentidos y el alma",
//     "BtnDivPic": "Vive la leyenda"
//   }
// }


  return (
    // <Header
    //   style={{
    //     height: "120px",
    //     color: "var(--textLithe)",
    //     border: "1px solid #6543",
    //     borderRadius: "22px",
    //     marginTop: "8px",
    //   }}
    //   className={
    //     path === ToursPathEn || ToursPathEs
    //       ? "container flex items-center justify-between "
    //       : "container flex items-center justify-around p-4 absolute top-0 z-50 inset-0 "
    //   }
    // >
    //   <Logo path={path} />
    //   <Nav path={path} />
    //   <MobilNav />
    //   <LeftNav path={path} />
    // </Header>


// import { NextResponse, NextRequest } from "next/server";
// import { UserLoginSchema } from "@/lib/utils/CheckSchema";
// import prisma from "@/lib/utils/db";
// // ? $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// export async function POST(request) {
//   try {
//     const body = await request.json();
//     // ? $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

//     const validation = UserLoginSchema.safeParse(body);
//     if (!validation.success) {
//       return NextResponse.json(
//         { message: validation.error[0].message },
//         { status: 404 }
//       );
//     }
//     // ? $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
//     const user = await prisma.user.findUnique({where: {email: body.email}})

//     if (!user) {
//         return NextResponse.json({message:"هذه الايميل غير موجود "})
        
//     }
//   } catch (error) {
//     console.error("خطأ في POST:", error);
//     return Response.json({ message: "خطأ داخلي في السيرفر" }, { status: 500 });
//   }
// }
// app/api/login/route.ts



// import createMiddleware from 'next-intl/middleware';
// import { routing } from './i18n/routing';

// export default createMiddleware(routing);

// export const config = {
//   matcher: '/((?!api|trpc|_next|_vercel|.*\\..*).*)'
// };
"use client";
// ? $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
import Box from "@mui/material/Box";
import TextField from "@mui/material/TextField";
import IconButton from "@mui/material/IconButton";
import OutlinedInput from "@mui/material/OutlinedInput";
import InputLabel from "@mui/material/InputLabel";
import InputAdornment from "@mui/material/InputAdornment";
import FormControl from "@mui/material/FormControl";
import Visibility from "@mui/icons-material/Visibility";
import VisibilityOff from "@mui/icons-material/VisibilityOff";
import Button from "@mui/material/Button";
import SendIcon from "@mui/icons-material/Send";
import { useState } from "react";
const logo2 = "/assets/Copilot_20250908_231423.png";
import Image from "next/image";
import { useScreenSize } from "@/auth/hooks/screenSize";
import { Link } from "@/i18n/navigation";
import { useTranslations } from "next-intl";

// ? $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
const SignUnForm = () => {
  const { width, height } = useScreenSize();
  const t = useTranslations("SignUnForm");

  const [showPassword, setShowPassword] = useState(false);

  const handleClickShowPassword = () => setShowPassword((show) => !show);

  const handleMouseDownPassword = (event) => {
    event.preventDefault();
  };

  const handleMouseUpPassword = (event) => {
    event.preventDefault();
  };
  return (
    <section className="w-full h-full lg:w-1/2 flex items-center justify-center z-20">
      <div
        style={{ borderRadius: "25px", position: "relative" }}
        className="w-3/4 h-5/6 lg:h-3/4 formDiv"
      >
        <div
          style={{ borderRadius: "25px" }}
          className="w-full h-full flex flex-col items-center justify-center gap-5"
        >
          <Image
            src={logo2}
            alt="Logo"
            width={150}
            height={150}
            loading="eager"
            style={{ zIndex: "9999" }}
            className="flex lg:hidden"
          />

          <h1 style={{ color: "#ff9800", zIndex: "999", fontSize: "28px" }}>
            {t("title")}
          </h1>
          <h3 style={{ zIndex: "999" }} className="text-gray-400 text-center">
            {t("p")}
          </h3>
          <Box
            component="form"
            sx={{
              "& > :not(style)": {
                m: 1,
                width:
                  width <= 500
                    ? "30ch"
                    : width <= 1023
                    ? "40ch"
                    : width >= 1280
                    ? "50ch"
                    : "40ch",
              },
              display: "flex",
              flexDirection: "column",
              zIndex: "999",
            }}
            noValidate
            autoComplete="off"
          >
            <TextField
              id="outlined-basic"
              label="Your Full Name"
              variant="outlined"
              sx={{
                width: "80%",
                input: {
                  width: "80%",
                  color: "#d4a85f", // لون النص داخل الحقل
                  fontSize: "18px", // حجم الخط
                  fontWeight: "bold", // سماكة الخط
                  fontFamily: "Cairo, sans-serif", // نوع الخط
                },
                "& .MuiOutlinedInput-root": {
                  "& fieldset": {
                    borderColor: "#d4a85f", // لون الحدود العادي
                  },
                  "&:hover fieldset": {
                    borderColor: "#ff9800", // عند المرور بالماوس
                  },
                  "&.Mui-focused fieldset": {
                    borderColor: "#ff9800", // أثناء التركيز (focus)
                    borderWidth: "2px",
                  },
                },
                "& .MuiInputLabel-root": {
                  color: "#d4a85f",
                },
                "& .MuiInputLabel-root.Mui-focused": {
                  color: "#ff9800",
                },
              }}
            />
            <TextField
              id="filled-basic"
              label="Your Email"
              variant="outlined"
              className="text-white"
              sx={{
                input: {
                  color: "#d4a85f", // لون النص داخل الحقل
                  fontSize: "18px", // حجم الخط
                  fontWeight: "bold", // سماكة الخط
                  fontFamily: "Cairo, sans-serif", // نوع الخط
                },
                "& .MuiOutlinedInput-root": {
                  "& fieldset": {
                    borderColor: "#d4a85f", // لون الحدود العادي
                  },
                  "&:hover fieldset": {
                    borderColor: "#ff9800", // عند المرور بالماوس
                  },
                  "&.Mui-focused fieldset": {
                    borderColor: "#ff9800", // أثناء التركيز (focus)
                    borderWidth: "2px",
                  },
                },
                "& .MuiInputLabel-root": {
                  color: "#d4a85f",
                },
                "& .MuiInputLabel-root.Mui-focused": {
                  color: "#ff9800",
                },
              }}
            />
            <FormControl
              sx={{
                m: 1,
                width: "25ch",
                "& .MuiOutlinedInput-root": {
                  "& fieldset": {
                    borderColor: "#d4a85f", // لون الحدود العادي
                  },
                  "&:hover fieldset": {
                    borderColor: "#ff9800", // عند المرور بالماوس
                  },
                  "&.Mui-focused fieldset": {
                    borderColor: "#ff9800", // أثناء التركيز (focus)
                    borderWidth: "2px",
                  },
                },
                "& .MuiInputLabel-root": {
                  color: "#d4a85f",
                },
                "& .MuiInputLabel-root.Mui-focused": {
                  color: "#ff9800",
                },
                input: {
                  color: "#d4a85f", // لون النص داخل الحقل
                  fontSize: "18px", // حجم الخط
                  fontWeight: "bold", // سماكة الخط
                  fontFamily: "Cairo, sans-serif", // نوع الخط
                },
              }}
              variant="outlined"
            >
              <InputLabel htmlFor="outlined-adornment-password">
                Your Password
              </InputLabel>
              <OutlinedInput
                id="outlined-adornment-password"
                type={showPassword ? "text" : "password"}
                endAdornment={
                  <InputAdornment position="end">
                    <IconButton
                      aria-label={
                        showPassword
                          ? "hide the password"
                          : "display the password"
                      }
                      onClick={handleClickShowPassword}
                      onMouseDown={handleMouseDownPassword}
                      onMouseUp={handleMouseUpPassword}
                      edge="end"
                    >
                      {showPassword ? (
                        <VisibilityOff style={{ color: "#d4a85f" }} />
                      ) : (
                        <Visibility style={{ color: "#d4a85f" }} />
                      )}
                    </IconButton>
                  </InputAdornment>
                }
                label="Password"
              />
              <Button
                variant="contained"
                endIcon={<SendIcon />}
                sx={{ mt: "22px", backgroundColor: "#d4a85f" }}
              >
                {t("btn")}
              </Button>
            </FormControl>
          </Box>
          <h3
            style={{ zIndex: "999", fontSize: "22px" }}
            className="text-gray-400"
          >
             {t("title2")}
          </h3>
          <Link href={"/login"}>
            <Button sx={{ zIndex: "999" }} size="large">
               {t("btn2")}
            </Button>
          </Link>
          <Link
            href={"/"}
            style={{
              padding: "12px",
              borderRadius: "18px",
              backgroundColor: "#d4a85f",
              fontSize: "16px",
              zIndex: "9999",
              fontWeight: "600",
            }}
          >
            {t("btn3")}
          </Link>
        </div>
      </div>
    </section>
  );
};

export default SignUnForm;
